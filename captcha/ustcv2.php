<?php
/**
 * USTC统一身份认证平台验证码识别
 * 
 * @author LJING
 * @version 2.0 
 */
    class ustccaptcha
    {
        private $cropdata;
        private $cropstr;
        private $hasimg;

        const standard = array(
            '0' => '000000111111000000000111111111100000011111111111100001111111111111100111111000011111101111100000011111011111000000111111111100000000111111111000000001111111110000000011111111100000000111111111000000001111111110000000011111111100000000111111111000000001111011111000000111110111110000001111101111110000111111001111111111111100001111111111110000001111111111000',
            '1' => '000001111111100000001111111111000000011111111110000000111111111100000001110011111000000000000111110000000000001111100000000000011111000000000000111110000000000001111100000000000011111000000000000111110000000000001111100000000000011111000000000000111110000000000001111100000000000011111000000000000111110000000111111111111110001111111111111100011111111111111',
            '2' => '000111111111000000111111111111100001111111111111110011111111111111100111100000111111101000000000111111000000000000111110000000000001111100000000000011111000000000001111110000000000111111000000000011111110000000001111111000000000111111100000000111111110000000011111111000000001111111100000000111111110000000011111111111111110111111111111111101111111111111111',
            '3' => '000011111111000000011111111111100000111111111111100001111111111111100011000000111111000000000000111110000000000001111100000000000011111000000000001111100000001111111111000000011111111000000000111111111100000001111111111100000000000111111100000000000011111000000000000111110100000000001111101110000001111111011111111111111100111111111111111000111111111111000',
            '4' => '000000001111111000000000011111110000000001111111100000000111111111000000001110111110000000111101111100000011110011111000000111000111110000011110001111100001111000011111000011100000111110001111000001111100111100000011111001110000000111110011111111111111111111111111111111111111111111111111111111111111111111000000000011111000000000000111110000000000001111100',
            '5' => '001111111111111000011111111111110000111111111111100001111111111111000011111000000000000111110000000000001111100000000000011111111111000000111111111111000001111111111111000011111111111111000111000001111111001000000001111110000000000001111100000000000011111000000000000111110100000000011111101110000001111110011111111111111100111111111111110000111111111111000',
            '6' => '000000001111110000000001111111111000001111111111111000111111111111110001111110000011100111110000000001001111100000000000111110011111100001111111111111100011111111111111100111111111111111101111110000011111011111000000011110111110000000111101111100000001111011111000000011110011110000000111100111110000011111000111111111111110000111111111111000000111111111100',
            '7' => '011111111111111110111111111111111101111111111111111011111111111111110000000000011111000000000000111110000000000011111100000000000111110000000000011111100000000000111110000000000011111100000000000111110000000000011111100000000000111110000000000001111100000000000111111000000000001111100000000000111111000000000001111100000000000111111000000000001111100000000',
            '8' => '000000111111100000000111111111110000011111111111110001111111111111110011111100011111100111110000011111001111100000111110011111100011111100011111111111110000011111111111000000111111111110000111111111111111001111100000111110111110000000111101111100000001111011111000000011110111110000000111101111110000011111001111111111111110011111111111111100011111111111110',
            '9' => '000000111111000000000111111111100000011111111111100001111111111111100011111000001111101111100000001111011111000000011110111110000000111101111100000001111011111000000011110111111000001111100111111111111111000111111111111110000111111111111100000111111001111000000000000111110010000000001111100111000001111110001111111111111100011111111111110000011111111110000'
        );
        
        public function findclosest(string $str){
            $num = '0';
            $simi = 0;
            foreach($this::standard as $n => $st){
                $tmpsimi = similar_text($str, $st);
                $num = $tmpsimi>$simi ? $n : $num;
                $simi = $tmpsimi>$simi ? $tmpsimi : $simi;
            }
            return $num;
        }
        
        function __construct(string $imgstr){
            $img = imagecreatefromstring($imgstr);
            $tmpdata = array();
            if($img==False){
                $this->hasimg = False;
                return;
            }
            for($i=0; $i<17; $i++){
                for($j=0; $j<21; $j++){
                    $color = imagecolorat($img,$i+27,$j+4);
                    $rgb = imagecolorsforindex($img, $color);
                    if($rgb['green'] < 160 && $rgb['green'] > 40){
                        $tmpdata[0][$j][$i] = 1;
                    } else {
                        $tmpdata[0][$j][$i] = 0;
                    }
                }
            }
            
            for($i=0; $i<17; $i++){
                for($j=0; $j<21; $j++){
                    $color = imagecolorat($img,$i+48,$j+4);
                    $rgb = imagecolorsforindex($img, $color);
                    if($rgb['green'] < 160 && $rgb['green'] > 40){
                        $tmpdata[1][$j][$i] = 1;
                    } else {
                        $tmpdata[1][$j][$i] = 0;
                    }
                }
            }
            
            for($i=0; $i<17; $i++){
                for($j=0; $j<21; $j++){
                    $color = imagecolorat($img,$i+69,$j+4);
                    $rgb = imagecolorsforindex($img, $color);
                    if($rgb['green'] < 160 && $rgb['green'] > 40){
                        $tmpdata[2][$j][$i] = 1;
                    } else {
                        $tmpdata[2][$j][$i] = 0;
                    }
                }
            }
            
            for($i=0; $i<17; $i++){
                for($j=0; $j<21; $j++){
                    $color = imagecolorat($img,$i+90,$j+4);
                    $rgb = imagecolorsforindex($img, $color);
                    if($rgb['green'] < 160 && $rgb['green'] > 40){
                        $tmpdata[3][$j][$i] = 1;
                    } else {
                        $tmpdata[3][$j][$i] = 0;
                    }
                }
            }
            
            $this->cropdata = $tmpdata;
            $this->hasimg = True;
        }

        public function datatostr(){
            $tmpstr = array();
            for($k=0; $k<4; $k++){
                $tmpstr[$k] = '';
                for($i=0; $i<21; $i++){
                    $tmpstr[$k] = $tmpstr[$k].implode($this->cropdata[$k][$i]);
                }
            }
            $this->cropstr = $tmpstr;
        }

        public function recognize(){
            if($this->hasimg) {
                $this->datatostr();
                return $this->findclosest($this->cropstr[0]).$this->findclosest($this->cropstr[1]).$this->findclosest($this->cropstr[2]).$this->findclosest($this->cropstr[3]);
            } else
                return '0000';
        }
        
    }    
    
?>
